name: Rust

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macOS-latest
        rust:
          - "1.54.0" # Current MSRV
          - stable
          - beta
          - nightly
        target:
          - ""
          - x86_64-unknown-linux-musl
        include:
          - rust: nightly
            allow_failure: true
        # exclude:
        #   - os: macOS-latest
        #     target: x86_64-unknown-linux-musl
        #   - os: ubuntu-latest
        #     rust: 1.40.0
        #     target: x86_64-unknown-linux-musl
        #   - os: ubuntu-latest
        #     rust: beta
        #     target: x86_64-unknown-linux-musl
        #   - os: ubuntu-latest
        #     rust: nightly
        #     target: x86_64-unknown-linux-musl
        #   - os: macOS-latest
        #     rust: 1.40.0
        #   - os: macOS-latest
        #     rust: beta
        #   - os: macOS-latest
        #     rust: nightly
    env:
      RUST_BACKTRACE: 1
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Build
        run: cargo build --all --verbose
        env:
          TARGET: ${{ matrix.target }}
        continue-on-error: ${{ matrix.allow_failure }}
      - name: Run tests
        run: cargo test --all --verbose
        env:
          TARGET: ${{ matrix.target }}
        continue-on-error: ${{ matrix.allow_failure }}
  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt
          override: true
      - name: Run fmt check
        run: cargo fmt --all -- --check
  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - name: Run clippy check
        run: cargo clippy

  check-examples:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - name: Check examples
        working-directory: examples
        shell: bash
        run: ./check-examples.sh

  # publish rustdoc to a gh-pages branch on pushes to main
  # this can be helpful to those depending on the mainline branch
  publish-docs:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@v2
      - name: Generate Docs
        run: |
          cargo doc --no-deps
          echo "<meta http-equiv=refresh content=0;url=lambda_runtime/index.html>" > target/doc/index.html
      - name: Publish
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
